// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  description       String?
  short_description String?
  imageUrl          String?
  isPublished       Boolean      @default(false)
  tags              String[]
  savedUsers        String[]
  shiftTiming       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?
  categoryId        String?      @db.ObjectId
  category          Category?    @relation(fields: [categoryId], references: [id])
  companyId         String?      @db.ObjectId
  company           Company?     @relation(fields: [companyId], references: [id])
  attachments       Attachment[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())

  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Company {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  description    String?
  logo           String?
  coverImage     String?
  mail           String?
  website        String?
  linkedIn       String?
  address_line_1 String?
  address_line_2 String?
  city           String?
  state          String?
  zipcode        String?
  followers      String[]
  overview       String?
  whyJoinUs      String?
  jobs           Job[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Attachment {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  url   String
  name  String
  jobId String? @db.ObjectId
  job   Job?    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile {
  userId         String       @id @map("_id")
  fullName       String?
  email          String?
  contact        String?
  appliedJobs    AppliedJob[] @relation("UserAppliedJobs")
  resumes        Resume[]
  activeResumeId String?
}

model AppliedJob {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId     String
  userId    String
  appliedAt DateTime @default(now())

  userProfile UserProfile @relation("UserAppliedJobs", fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], name: "idx_user_id")
  @@index([jobId], name: "idx_job_id")
}

model Resume {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  url           String
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([userProfileId], name: "idx_user_profile_id")
}
